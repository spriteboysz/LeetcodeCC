/**
 * Author: Deean
 * Date: 2022-09-10 11:35
 * FileName: common/codec2.h
 * Description: 
 */

#ifndef codec_h
#define codec_h

#include <iostream>
#include <vector>
#include <string>
#include <sstream>

using namespace std;

#define CASET int ___T, case_n = 1; scanf("%d ", &___T); while (___T-- > 0)
#define PRINTCASE printf("Case #%d: ",case_n++)
#define PRINTCASE_ printf("Case #%d:\n",case_n++)
#define RD(a) scanf("%d", &(a))
#define RDD(a, b) scanf("%d%d", &(a), &(b))

#define CLK_INIT clock_t clk_start = 0, clk_end = 0
#define CLK_START clk_start = clock()
#define CLK_END\
    do{ clk_end = clock();\
    cout << "Time[" << (double)(clk_end - clk_start) / CLOCKS_PER_SEC << "s]" << endl; }while(0)

#define SZ(X) ((int)(X).size())
#define FOR(I, S, E) for (int I = (A); I < (B); ++I)
#define FOR_(I, S, E) for (int I = (A); I <= (B); ++I)
#define PB push_back
#define MP make_pair

template<typename T>
string vectorToString(vector<T> v) {
    ostringstream ss;
    ss << "[";
    for (auto i = v.begin(); i != v.end(); ++i) {
        ss << *i;
        if (i + 1 != v.end()) ss << ", ";
    }
    ss << "]";
    return ss.str();
}

template<typename T>
string vector2ToString(vector<vector<T>> v) {
    ostringstream ss;
    ss << "[" << endl;
    for (int i = 0; i < v.size(); ++i) {
        auto &row = v[i];
        ss << " " << "[";
        for (int j = 0; j < row.size(); ++j) {
            auto &val = row[j];
            ss << val;
            if (j < row.size() - 1) ss << ", ";
        }
        ss << "]";
        if (i < v.size() - 1) ss << ", ";
        ss << endl;
    }
    ss << "]" << endl;
    return ss.str();
}

vector<string> stringToVector(string str) {
    str = str.substr(1, str.size() - 2);
    istringstream ss(str);
    string token;
    vector<string> ans;
    while (getline(ss, token, ',')) ans.push_back(token);
    return ans;
}

vector<int> stringToIntegerVector(string str) {
    str = str.substr(1, str.size() - 2);
    istringstream ss(str);
    string token;
    vector<int> ans;
    while (getline(ss, token, ',')) ans.push_back(stoi(token));
    return ans;
}

template<typename T>
void printVector(vector<vector<T>> v) {
    cout << "[" << endl;
    for (int i = 0; i < v.size(); ++i) {
        auto &row = v[i];
        cout << "[";
        for (int j = 0; j < row.size(); ++j) {
            auto &val = row[j];
            cout << val;
            if (j < row.size() - 1) cout << ", ";
        }
        cout << "]";
        if (i < v.size() - 1) cout << ", ";
        cout << endl;
    }
    cout << "]" << endl;
}

vector<vector<int>> readVector() {
    vector<vector<int>> ans;
    int i = 0;
    cin.get(); // outer [
    while (cin.peek() != ']') {
        cin.get(); // inner [
        if (ans.size() <= i) ans.emplace_back();
        while (cin.peek() != ']') {
            int n;
            cin >> n;
            ans[i].push_back(n);
            if (cin.peek() == ',') cin.get();
        }
        cin.get(); // inner ]
        if (cin.peek() == ',') cin.get();
        ++i;
    }
    cin.get(); // outer ]
    return ans;
}

// string to vector
template<typename T = int>
vector<T> stringToVector(string s) {
    int cnt = 1;
    for (char &c: s) {
        if (c == ',') {
            cnt++;
        } else if (c == ']') {
            break;
        }
    }
    for (char &c: s) {
        if (c == '[' || c == ']' || c == ',') {
            c = ' ';
        }
    }
    istringstream iss(s);
    vector<T> vec;
    T item;
    for (int i = 1; i <= cnt; i++) {
        if (!(iss >> item)) {
            break;
        }
        vec.push_back(item);
    }
    return vec;
}

template<typename T = int>
vector<vector<T>> stringToVector2(string s) {
    int cnt = 1;
    for (char &c: s) {
        if (c == ',') {
            cnt++;
        } else if (c == ']') {
            break;
        }
    }
    for (char &c: s) {
        if (c == '[' || c == ']' || c == ',') {
            c = ' ';
        }
    }
    istringstream iss(s);
    vector<vector<T>> vec;
    T item;
    bool flag = true;
    while (flag) {
        vector<T> items;
        for (int i = 1; i <= cnt; i++) {
            if (!(iss >> item)) {
                flag = false;
                break;
            }
            items.push_back(item);
        }
        if (flag) {
            vec.push_back(items);
        }
    }
    return vec;
}

// 重载toString方法
template<typename T>
string toString(vector<vector<T>> v) {
    return vector2ToString(v);
}

template<typename T>
string toString(vector<T> v) {
    return vectorToString(v);
}

template<typename T>
string toString(T t) {
    return to_string(t);
}

string toString(char c) {
    string ss = "";
    return ss + c;
}

string toString(const string &s) {
    return s;
}

string toString(bool b) {
    return b == 0 ? "false" : "true";
}


#endif

